# CrispTTS Requirements - Tested Working Configuration
# Based on successful Kartoffelbox synthesis (August 2025)

# Core Dependencies
numpy>=1.26.0,<2.0.0  # Compromise: works with most packages, avoids 2.x conflicts
requests>=2.25.0

# PyTorch Ecosystem - Stable versions that work together
torch>=2.6.0,<2.8.0
torchaudio>=2.6.0,<2.8.0
# Note: torchvision intentionally omitted to avoid conflicts

# Transformers & HuggingFace
transformers>=4.46.0,<4.52.0  # Compromise version
tokenizers>=0.20.0,<0.22.0
huggingface_hub>=0.20.0
safetensors>=0.4.0

# Audio Processing
soundfile>=0.12.0
pydub>=0.25.0
librosa>=0.10.0,<0.11.0  # Avoid 0.11.0 which conflicts with chatterbox

# Text Processing
beautifulsoup4>=4.9.0
Markdown>=3.0
pypdfium2
EbookLib>=0.17

# TTS Engines - Core Working Set
edge-tts>=6.0
chatterbox-tts==0.1.2
diffusers>=0.29.0
resemble-perth>=1.0.0

# MLX for Apple Silicon (conditional install recommended)
mlx>=0.20.0; platform_machine == "arm64"
mlx-audio>=0.2.0; platform_machine == "arm64"

# OuteTTS (may have conflicts but core CrispTTS works without it)
# outetts>=0.4.0  # Comment out if conflicts arise

# SNAC for audio decoding
snac

# Optional TTS engines (install selectively based on needs)
# llama-cpp-python  # For GGUF models, install with specific CMAKE_ARGS
# nemo_toolkit[tts]>=1.18.0  # Large install, only if using NeMo
# TTS>=0.20.0  # Coqui TTS, has pandas version conflicts

# Development (optional)
scipy>=1.6.0
scikit-learn>=1.0.0
datasets>=2.0.0

# Notes:
# 1. This configuration prioritizes TTS functionality over compatibility with
#    research packages (vllm, kraken, etc.) that have stricter version requirements
# 2. Some packages like f5-tts, xcodec2 may not work due to numpy/torch conflicts
# 3. For Apple Silicon, MLX packages provide better performance than PyTorch alternatives
# 4. Install order matters: install PyTorch first, then audio packages, then TTS engines
# 5. If you need packages commented out, create separate environments for them